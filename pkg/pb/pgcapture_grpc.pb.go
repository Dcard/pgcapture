// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBLogGatewayClient is the client API for DBLogGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBLogGatewayClient interface {
	Capture(ctx context.Context, opts ...grpc.CallOption) (DBLogGateway_CaptureClient, error)
}

type dBLogGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewDBLogGatewayClient(cc grpc.ClientConnInterface) DBLogGatewayClient {
	return &dBLogGatewayClient{cc}
}

func (c *dBLogGatewayClient) Capture(ctx context.Context, opts ...grpc.CallOption) (DBLogGateway_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBLogGateway_ServiceDesc.Streams[0], "/pgcapture.DBLogGateway/Capture", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBLogGatewayCaptureClient{stream}
	return x, nil
}

type DBLogGateway_CaptureClient interface {
	Send(*CaptureRequest) error
	Recv() (*CaptureMessage, error)
	grpc.ClientStream
}

type dBLogGatewayCaptureClient struct {
	grpc.ClientStream
}

func (x *dBLogGatewayCaptureClient) Send(m *CaptureRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBLogGatewayCaptureClient) Recv() (*CaptureMessage, error) {
	m := new(CaptureMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DBLogGatewayServer is the server API for DBLogGateway service.
// All implementations must embed UnimplementedDBLogGatewayServer
// for forward compatibility
type DBLogGatewayServer interface {
	Capture(DBLogGateway_CaptureServer) error
	mustEmbedUnimplementedDBLogGatewayServer()
}

// UnimplementedDBLogGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedDBLogGatewayServer struct {
}

func (UnimplementedDBLogGatewayServer) Capture(DBLogGateway_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedDBLogGatewayServer) mustEmbedUnimplementedDBLogGatewayServer() {}

// UnsafeDBLogGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBLogGatewayServer will
// result in compilation errors.
type UnsafeDBLogGatewayServer interface {
	mustEmbedUnimplementedDBLogGatewayServer()
}

func RegisterDBLogGatewayServer(s grpc.ServiceRegistrar, srv DBLogGatewayServer) {
	s.RegisterService(&DBLogGateway_ServiceDesc, srv)
}

func _DBLogGateway_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBLogGatewayServer).Capture(&dBLogGatewayCaptureServer{stream})
}

type DBLogGateway_CaptureServer interface {
	Send(*CaptureMessage) error
	Recv() (*CaptureRequest, error)
	grpc.ServerStream
}

type dBLogGatewayCaptureServer struct {
	grpc.ServerStream
}

func (x *dBLogGatewayCaptureServer) Send(m *CaptureMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBLogGatewayCaptureServer) Recv() (*CaptureRequest, error) {
	m := new(CaptureRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DBLogGateway_ServiceDesc is the grpc.ServiceDesc for DBLogGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBLogGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgcapture.DBLogGateway",
	HandlerType: (*DBLogGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _DBLogGateway_Capture_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/pgcapture.proto",
}

// DBLogControllerClient is the client API for DBLogController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBLogControllerClient interface {
	PullDumpInfo(ctx context.Context, opts ...grpc.CallOption) (DBLogController_PullDumpInfoClient, error)
}

type dBLogControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDBLogControllerClient(cc grpc.ClientConnInterface) DBLogControllerClient {
	return &dBLogControllerClient{cc}
}

func (c *dBLogControllerClient) PullDumpInfo(ctx context.Context, opts ...grpc.CallOption) (DBLogController_PullDumpInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &DBLogController_ServiceDesc.Streams[0], "/pgcapture.DBLogController/PullDumpInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBLogControllerPullDumpInfoClient{stream}
	return x, nil
}

type DBLogController_PullDumpInfoClient interface {
	Send(*DumpInfoRequest) error
	Recv() (*DumpInfoResponse, error)
	grpc.ClientStream
}

type dBLogControllerPullDumpInfoClient struct {
	grpc.ClientStream
}

func (x *dBLogControllerPullDumpInfoClient) Send(m *DumpInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBLogControllerPullDumpInfoClient) Recv() (*DumpInfoResponse, error) {
	m := new(DumpInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DBLogControllerServer is the server API for DBLogController service.
// All implementations must embed UnimplementedDBLogControllerServer
// for forward compatibility
type DBLogControllerServer interface {
	PullDumpInfo(DBLogController_PullDumpInfoServer) error
	mustEmbedUnimplementedDBLogControllerServer()
}

// UnimplementedDBLogControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDBLogControllerServer struct {
}

func (UnimplementedDBLogControllerServer) PullDumpInfo(DBLogController_PullDumpInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method PullDumpInfo not implemented")
}
func (UnimplementedDBLogControllerServer) mustEmbedUnimplementedDBLogControllerServer() {}

// UnsafeDBLogControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBLogControllerServer will
// result in compilation errors.
type UnsafeDBLogControllerServer interface {
	mustEmbedUnimplementedDBLogControllerServer()
}

func RegisterDBLogControllerServer(s grpc.ServiceRegistrar, srv DBLogControllerServer) {
	s.RegisterService(&DBLogController_ServiceDesc, srv)
}

func _DBLogController_PullDumpInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBLogControllerServer).PullDumpInfo(&dBLogControllerPullDumpInfoServer{stream})
}

type DBLogController_PullDumpInfoServer interface {
	Send(*DumpInfoResponse) error
	Recv() (*DumpInfoRequest, error)
	grpc.ServerStream
}

type dBLogControllerPullDumpInfoServer struct {
	grpc.ServerStream
}

func (x *dBLogControllerPullDumpInfoServer) Send(m *DumpInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBLogControllerPullDumpInfoServer) Recv() (*DumpInfoRequest, error) {
	m := new(DumpInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DBLogController_ServiceDesc is the grpc.ServiceDesc for DBLogController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBLogController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgcapture.DBLogController",
	HandlerType: (*DBLogControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDumpInfo",
			Handler:       _DBLogController_PullDumpInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/pgcapture.proto",
}
